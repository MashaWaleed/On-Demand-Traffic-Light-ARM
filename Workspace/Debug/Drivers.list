
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001978  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001aa8  08001aa8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001aa8  08001aa8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa8  08001aa8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa8  08001aa8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aac  08001aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001ab0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000004  08001ab4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001ab4  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001cec  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a25  00000000  00000000  00021d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000ee8  00000000  00000000  00022781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000280  00000000  00000000  00023670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001f8  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002dd4  00000000  00000000  00023ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000031c7  00000000  00000000  000268bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000aa0b  00000000  00000000  00029a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000008f8  00000000  00000000  00034490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001a90 	.word	0x08001a90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001a90 	.word	0x08001a90

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <EXTI0_IRQHandler>:
 * 										ISR FUNCTIONS
 * =======================================================================================
 */


void EXTI0_IRQHandler(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <EXTI0_IRQHandler+0x14>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[0]();
 8000abe:	4b03      	ldr	r3, [pc, #12]	; (8000acc <EXTI0_IRQHandler+0x18>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4798      	blx	r3
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010400 	.word	0x40010400
 8000acc:	20000020 	.word	0x20000020

08000ad0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<1;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <EXTI1_IRQHandler+0x14>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[1]();
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <EXTI1_IRQHandler+0x18>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4798      	blx	r3
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010400 	.word	0x40010400
 8000ae8:	20000020 	.word	0x20000020

08000aec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<2;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <EXTI2_IRQHandler+0x14>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[2]();
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <EXTI2_IRQHandler+0x18>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4798      	blx	r3
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010400 	.word	0x40010400
 8000b04:	20000020 	.word	0x20000020

08000b08 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<3;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <EXTI3_IRQHandler+0x14>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[3]();
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <EXTI3_IRQHandler+0x18>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	4798      	blx	r3
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010400 	.word	0x40010400
 8000b20:	20000020 	.word	0x20000020

08000b24 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<4;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <EXTI4_IRQHandler+0x14>)
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[4]();
 8000b2e:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <EXTI4_IRQHandler+0x18>)
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	4798      	blx	r3
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010400 	.word	0x40010400
 8000b3c:	20000020 	.word	0x20000020

08000b40 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   GP_IRQ_Callback[5](); }
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <EXTI9_5_IRQHandler+0x1c>
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <EXTI9_5_IRQHandler+0x88>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   GP_IRQ_Callback[6](); }
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <EXTI9_5_IRQHandler+0x34>
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b6a:	2240      	movs	r2, #64	; 0x40
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <EXTI9_5_IRQHandler+0x88>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   GP_IRQ_Callback[7](); }
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <EXTI9_5_IRQHandler+0x4c>
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <EXTI9_5_IRQHandler+0x88>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   GP_IRQ_Callback[8](); }
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <EXTI9_5_IRQHandler+0x66>
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <EXTI9_5_IRQHandler+0x88>)
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   GP_IRQ_Callback[9](); }
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <EXTI9_5_IRQHandler+0x80>
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <EXTI9_5_IRQHandler+0x84>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <EXTI9_5_IRQHandler+0x88>)
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	4798      	blx	r3
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010400 	.word	0x40010400
 8000bc8:	20000020 	.word	0x20000020

08000bcc <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_Callback[10](); }
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d008      	beq.n	8000bee <EXTI15_10_IRQHandler+0x22>
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6153      	str	r3, [r2, #20]
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <EXTI15_10_IRQHandler+0xc0>)
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_Callback[11](); }
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <EXTI15_10_IRQHandler+0x40>
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <EXTI15_10_IRQHandler+0xc0>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_Callback[12](); }
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <EXTI15_10_IRQHandler+0x5e>
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c22:	6153      	str	r3, [r2, #20]
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <EXTI15_10_IRQHandler+0xc0>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_Callback[13](); }
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d008      	beq.n	8000c48 <EXTI15_10_IRQHandler+0x7c>
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <EXTI15_10_IRQHandler+0xc0>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c46:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_Callback[14](); }
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d008      	beq.n	8000c66 <EXTI15_10_IRQHandler+0x9a>
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6153      	str	r3, [r2, #20]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <EXTI15_10_IRQHandler+0xc0>)
 8000c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c64:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_Callback[15](); }
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d008      	beq.n	8000c84 <EXTI15_10_IRQHandler+0xb8>
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <EXTI15_10_IRQHandler+0xbc>)
 8000c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <EXTI15_10_IRQHandler+0xc0>)
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	4798      	blx	r3
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010400 	.word	0x40010400
 8000c8c:	20000020 	.word	0x20000020

08000c90 <GET_CRLH_Position>:
#include "GPIO.h"

/**================================================================ */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ca0:	f000 80a5 	beq.w	8000dee <GET_CRLH_Position+0x15e>
 8000ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ca8:	f300 80a3 	bgt.w	8000df2 <GET_CRLH_Position+0x162>
 8000cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cb0:	f000 809b 	beq.w	8000dea <GET_CRLH_Position+0x15a>
 8000cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cb8:	f300 809b 	bgt.w	8000df2 <GET_CRLH_Position+0x162>
 8000cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc0:	f000 8091 	beq.w	8000de6 <GET_CRLH_Position+0x156>
 8000cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc8:	f300 8093 	bgt.w	8000df2 <GET_CRLH_Position+0x162>
 8000ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd0:	f000 8087 	beq.w	8000de2 <GET_CRLH_Position+0x152>
 8000cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd8:	f300 808b 	bgt.w	8000df2 <GET_CRLH_Position+0x162>
 8000cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce0:	d07d      	beq.n	8000dde <GET_CRLH_Position+0x14e>
 8000ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce6:	f300 8084 	bgt.w	8000df2 <GET_CRLH_Position+0x162>
 8000cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cee:	d074      	beq.n	8000dda <GET_CRLH_Position+0x14a>
 8000cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf4:	dc7d      	bgt.n	8000df2 <GET_CRLH_Position+0x162>
 8000cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cfa:	d06c      	beq.n	8000dd6 <GET_CRLH_Position+0x146>
 8000cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d00:	dc77      	bgt.n	8000df2 <GET_CRLH_Position+0x162>
 8000d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d06:	d064      	beq.n	8000dd2 <GET_CRLH_Position+0x142>
 8000d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d0c:	dc71      	bgt.n	8000df2 <GET_CRLH_Position+0x162>
 8000d0e:	2b80      	cmp	r3, #128	; 0x80
 8000d10:	d05d      	beq.n	8000dce <GET_CRLH_Position+0x13e>
 8000d12:	2b80      	cmp	r3, #128	; 0x80
 8000d14:	dc6d      	bgt.n	8000df2 <GET_CRLH_Position+0x162>
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	dc48      	bgt.n	8000dac <GET_CRLH_Position+0x11c>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dd69      	ble.n	8000df2 <GET_CRLH_Position+0x162>
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	2b1f      	cmp	r3, #31
 8000d22:	d866      	bhi.n	8000df2 <GET_CRLH_Position+0x162>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <GET_CRLH_Position+0x9c>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000db3 	.word	0x08000db3
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000df3 	.word	0x08000df3
 8000d38:	08000dbb 	.word	0x08000dbb
 8000d3c:	08000df3 	.word	0x08000df3
 8000d40:	08000df3 	.word	0x08000df3
 8000d44:	08000df3 	.word	0x08000df3
 8000d48:	08000dbf 	.word	0x08000dbf
 8000d4c:	08000df3 	.word	0x08000df3
 8000d50:	08000df3 	.word	0x08000df3
 8000d54:	08000df3 	.word	0x08000df3
 8000d58:	08000df3 	.word	0x08000df3
 8000d5c:	08000df3 	.word	0x08000df3
 8000d60:	08000df3 	.word	0x08000df3
 8000d64:	08000df3 	.word	0x08000df3
 8000d68:	08000dc3 	.word	0x08000dc3
 8000d6c:	08000df3 	.word	0x08000df3
 8000d70:	08000df3 	.word	0x08000df3
 8000d74:	08000df3 	.word	0x08000df3
 8000d78:	08000df3 	.word	0x08000df3
 8000d7c:	08000df3 	.word	0x08000df3
 8000d80:	08000df3 	.word	0x08000df3
 8000d84:	08000df3 	.word	0x08000df3
 8000d88:	08000df3 	.word	0x08000df3
 8000d8c:	08000df3 	.word	0x08000df3
 8000d90:	08000df3 	.word	0x08000df3
 8000d94:	08000df3 	.word	0x08000df3
 8000d98:	08000df3 	.word	0x08000df3
 8000d9c:	08000df3 	.word	0x08000df3
 8000da0:	08000df3 	.word	0x08000df3
 8000da4:	08000df3 	.word	0x08000df3
 8000da8:	08000dc7 	.word	0x08000dc7
 8000dac:	2b40      	cmp	r3, #64	; 0x40
 8000dae:	d00c      	beq.n	8000dca <GET_CRLH_Position+0x13a>
 8000db0:	e01f      	b.n	8000df2 <GET_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e01e      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	e01c      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	e01a      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	e018      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	e016      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000dc6:	2314      	movs	r3, #20
 8000dc8:	e014      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000dca:	2318      	movs	r3, #24
 8000dcc:	e012      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000dce:	231c      	movs	r3, #28
 8000dd0:	e010      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e00e      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e00c      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	e00a      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000dde:	230c      	movs	r3, #12
 8000de0:	e008      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000de2:	2310      	movs	r3, #16
 8000de4:	e006      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000de6:	2314      	movs	r3, #20
 8000de8:	e004      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000dea:	2318      	movs	r3, #24
 8000dec:	e002      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000dee:	231c      	movs	r3, #28
 8000df0:	e000      	b.n	8000df4 <GET_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register = NULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
	config_register = (pinconfig->GPIO_PinNumber < GPIO_PIN_8)?&GPIOX->CRL:&GPIOX->CRH;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	2bff      	cmp	r3, #255	; 0xff
 8000e14:	d801      	bhi.n	8000e1a <MCAL_GPIO_Init+0x1a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	e001      	b.n	8000e1e <MCAL_GPIO_Init+0x1e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff31 	bl	8000c90 <GET_CRLH_Position>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	210f      	movs	r1, #15
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	43d2      	mvns	r2, r2
 8000e40:	401a      	ands	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d00b      	beq.n	8000e66 <MCAL_GPIO_Init+0x66>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d007      	beq.n	8000e66 <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d003      	beq.n	8000e66 <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	789b      	ldrb	r3, [r3, #2]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d10e      	bne.n	8000e84 <MCAL_GPIO_Init+0x84>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	789b      	ldrb	r3, [r3, #2]
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	78db      	ldrb	r3, [r3, #3]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	75fb      	strb	r3, [r7, #23]
 8000e82:	e031      	b.n	8000ee8 <MCAL_GPIO_Init+0xe8>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <MCAL_GPIO_Init+0x94>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d107      	bne.n	8000ea4 <MCAL_GPIO_Init+0xa4>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	789b      	ldrb	r3, [r3, #2]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	75fb      	strb	r3, [r7, #23]
 8000ea2:	e021      	b.n	8000ee8 <MCAL_GPIO_Init+0xe8>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	789b      	ldrb	r3, [r3, #2]
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d107      	bne.n	8000ebc <MCAL_GPIO_Init+0xbc>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	75fb      	strb	r3, [r7, #23]
 8000eba:	e015      	b.n	8000ee8 <MCAL_GPIO_Init+0xe8>
		}
		//if pin is PU or PD
		else{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d107      	bne.n	8000ed8 <MCAL_GPIO_Init+0xd8>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	8812      	ldrh	r2, [r2, #0]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	e007      	b.n	8000ee8 <MCAL_GPIO_Init+0xe8>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	8812      	ldrh	r2, [r2, #0]
 8000ee0:	43d2      	mvns	r2, r2
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	7df9      	ldrb	r1, [r7, #23]
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <MCAL_GPIO_ReadPin>:
 * @param[in]	-PinNumber: Set pin number according @ref GPIO_PINS_define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOX , uint16_t PinNumber)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
	uint8_t bit_status;
	if (((GPIOX->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <MCAL_GPIO_ReadPin+0x1e>
	{
		bit_status = GPIO_PIN_SET;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e001      	b.n	8000f24 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bit_status = GPIO_PIN_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
	}
	return bit_status ;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <MCAL_GPIO_WritePin+0x1e>
		//alternative solution

		//in the BSRR register
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber ;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}

}
 8000f4c:	e002      	b.n	8000f54 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	615a      	str	r2, [r3, #20]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <MCAL_GPIO_TogglePin>:
 * @param[in]	-PinNumber: Specific the port bit to read. set by @ref GPIO_PINS_define
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR ^= (PinNumber);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	405a      	eors	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60da      	str	r2, [r3, #12]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <HAL_LED_Init>:
 * @defgroup Public_Functions LED Driver
 * @{
 */

void HAL_LED_Init(LED_Port_t Copy_LedPortId, LED_Pin_t Copy_LedPinId)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
    /**< Init LED to be output */
	GPIO_PinConfig_t cfg;
	cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	73bb      	strb	r3, [r7, #14]
	cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8000f90:	2302      	movs	r3, #2
 8000f92:	73fb      	strb	r3, [r7, #15]
	cfg.GPIO_PinNumber = Copy_LedPinId;
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	81bb      	strh	r3, [r7, #12]
    MCAL_GPIO_Init(Copy_LedPortId, &cfg);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff2e 	bl	8000e00 <MCAL_GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_LED_On>:

void HAL_LED_On(LED_Port_t Copy_LedPortId, LED_Pin_t Copy_LedPinId)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
    MCAL_GPIO_WritePin(Copy_LedPortId, Copy_LedPinId, GPIO_PIN_SET);
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffb6 	bl	8000f30 <MCAL_GPIO_WritePin>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_LED_Off>:

void HAL_LED_Off(LED_Port_t Copy_LedPortId, LED_Pin_t Copy_LedPinId)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_WritePin(Copy_LedPortId, Copy_LedPinId, GPIO_PIN_RESET);
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa6 	bl	8000f30 <MCAL_GPIO_WritePin>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_LED_Toggle>:

void HAL_LED_Toggle(LED_Port_t Copy_LedPortId, LED_Pin_t Copy_LedPinId)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_TogglePin(Copy_LedPortId, Copy_LedPinId);
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffae 	bl	8000f5e <MCAL_GPIO_TogglePin>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_PushButton_Init>:
 * @defgroup Public_Functions LED Driver
 * @{
 */

Std_ReturnType HAL_PushButton_Init(PushButton_Port_t Copy_ButtonPortId, PushButton_Pin_t Copy_ButtonPinId, PushButton_State_t Copy_ActiveLevel)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	807b      	strh	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	707b      	strb	r3, [r7, #1]
	if (Copy_ActiveLevel != ACTIVE_HIGH && Copy_ActiveLevel != ACTIVE_LOW && Copy_ActiveLevel != FLOATING)
 800101a:	787b      	ldrb	r3, [r7, #1]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d007      	beq.n	8001030 <HAL_PushButton_Init+0x26>
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <HAL_PushButton_Init+0x26>
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d001      	beq.n	8001030 <HAL_PushButton_Init+0x26>
	{
		return E_NOT_OK; /**< Invalid pull-up/down configuration */
 800102c:	2300      	movs	r3, #0
 800102e:	e02b      	b.n	8001088 <HAL_PushButton_Init+0x7e>
	}
	else
	{
		GPIO_PinConfig_t cfg;
		cfg.GPIO_PinNumber = Copy_ButtonPinId;
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8001034:	2302      	movs	r3, #2
 8001036:	73fb      	strb	r3, [r7, #15]

		/**< Initialize Push Button to be input with pull-up or pull-down */
		if(Copy_ActiveLevel == ACTIVE_LOW)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_PushButton_Init+0x48>
		{
			cfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800103e:	2302      	movs	r3, #2
 8001040:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(Copy_ButtonPortId, &cfg);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fed9 	bl	8000e00 <MCAL_GPIO_Init>
			return E_OK;
 800104e:	2301      	movs	r3, #1
 8001050:	e01a      	b.n	8001088 <HAL_PushButton_Init+0x7e>

		}

		else if(Copy_ActiveLevel == ACTIVE_HIGH)
 8001052:	787b      	ldrb	r3, [r7, #1]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d109      	bne.n	800106c <HAL_PushButton_Init+0x62>
		{
			cfg.GPIO_MODE = GPIO_MODE_INPUT_PD;
 8001058:	2303      	movs	r3, #3
 800105a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(Copy_ButtonPortId, &cfg);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fecc 	bl	8000e00 <MCAL_GPIO_Init>
			return E_OK;
 8001068:	2301      	movs	r3, #1
 800106a:	e00d      	b.n	8001088 <HAL_PushButton_Init+0x7e>
		}


		else if(Copy_ActiveLevel == FLOATING)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d109      	bne.n	8001086 <HAL_PushButton_Init+0x7c>
		{
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001072:	2301      	movs	r3, #1
 8001074:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(Copy_ButtonPortId, &cfg);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff febf 	bl	8000e00 <MCAL_GPIO_Init>
			return E_OK;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_PushButton_Init+0x7e>
		}
		else
		{
			return E_NOT_OK;
 8001086:	2300      	movs	r3, #0
		}

	}
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_PushButton_Read>:

u8 HAL_PushButton_Read(PushButton_Port_t Copy_ButtonPortId, PushButton_Pin_t Copy_ButtonPinId, u32 numIterations)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	817b      	strh	r3, [r7, #10]
	u8 Copy_ButtonState;
	/**< Start the SysTick timer */
	STK_Init(SYSTICK_RELOAD_VALUE); /**< Initialize SysTick with a suitable reload value. */
 800109e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80010a2:	f000 f8bd 	bl	8001220 <STK_Init>
	STK_Start();
 80010a6:	f000 f8db 	bl	8001260 <STK_Start>
	bool lastButtonState;

	/**< Variables to track time for debounce */
	static u32 lastDebounceTime = 0;

	u32 stableCount = 0; /**< Count of stable readings */
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]

	/**< Repeat the reading and debouncing for the specified number of iterations */
	for (u32 i = 0; i < numIterations; i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e02c      	b.n	800110e <HAL_PushButton_Read+0x7e>
	{
		/**< Read the current button state */
		currentButtonState = MCAL_GPIO_ReadPin(Copy_ButtonPortId, Copy_ButtonPinId);
 80010b4:	897b      	ldrh	r3, [r7, #10]
 80010b6:	4619      	mov	r1, r3
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff ff22 	bl	8000f02 <MCAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	76fb      	strb	r3, [r7, #27]


		u32 currentMillis = STK_GetElapsedCounts(); // Get the current time in milliseconds
 80010c2:	f000 f8db 	bl	800127c <STK_GetElapsedCounts>
 80010c6:	6178      	str	r0, [r7, #20]

		/**< Check if the button state has changed and is stable for the debounce delay */
		if (currentButtonState != lastButtonState)
 80010c8:	7efa      	ldrb	r2, [r7, #27]
 80010ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d005      	beq.n	80010de <HAL_PushButton_Read+0x4e>
		{
			/**< Update the last button state */
			lastButtonState = currentButtonState;
 80010d2:	7efb      	ldrb	r3, [r7, #27]
 80010d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			/**< Update the last debounce time */
			lastDebounceTime = currentMillis;
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_PushButton_Read+0x90>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	6013      	str	r3, [r2, #0]
		}

		/**< Check if the button state has been stable for the debounce delay */
		if ((currentMillis - lastDebounceTime) >= DEBOUNCE_DELAY_MS)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_PushButton_Read+0x90>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d90b      	bls.n	8001102 <HAL_PushButton_Read+0x72>
		{
			/**< Increment the stable count */
			stableCount++;
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	3301      	adds	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]

			/**< If the button state has been stable for a sufficient number of times, consider it stable */
			if (stableCount >= (numIterations-2))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b02      	subs	r3, #2
 80010f4:	6a3a      	ldr	r2, [r7, #32]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d303      	bcc.n	8001102 <HAL_PushButton_Read+0x72>
			{
				/**< Assign the debounced button state to the output parameter */
				Copy_ButtonState = currentButtonState;
 80010fa:	7efb      	ldrb	r3, [r7, #27]
 80010fc:	74fb      	strb	r3, [r7, #19]
				return Copy_ButtonState;
 80010fe:	7cfb      	ldrb	r3, [r7, #19]
 8001100:	e00a      	b.n	8001118 <HAL_PushButton_Read+0x88>
			}
		}

		/**< Button state is not stable yet, return the previous state */
		Copy_ButtonState = lastButtonState;
 8001102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001106:	74fb      	strb	r3, [r7, #19]
	for (u32 i = 0; i < numIterations; i++)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	3301      	adds	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3ce      	bcc.n	80010b4 <HAL_PushButton_Read+0x24>
	}

	return UNSTABLE_READ; /**< Button state not stable after the specified number of iterations */
 8001116:	230a      	movs	r3, #10
}
 8001118:	4618      	mov	r0, r3
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000005c 	.word	0x2000005c

08001124 <MCAL_RCC_InitSysClock>:
//}


/*****************************< API Implementations *****************************/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
        
        /**< Enable the external clock to be the source for the system clock. */
        #if RCC_CLK_BYPASS == RCC_RC_CLK_
            SET_BIT(RCC_CR, RCC_CR_HSEBYP); /**< Choose RC as a SYSCLK */
        #elif RCC_CLK_BYPASS == RCC_CRYSTAL_CLK_
            CLR_BIT(RCC_CR, RCC_CR_HSEBYP); /**< Choose CRYSTAL as a SYSCLK */
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MCAL_RCC_InitSysClock+0x60>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <MCAL_RCC_InitSysClock+0x60>)
 8001134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
        #else 
            #error "Wrong Choice !!"
        #endif /**< RCC_CLK_BYPASS */

        /**< Enable the High-Speed External clock. */
        SET_BIT(RCC_CR, RCC_CR_HSEON);
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MCAL_RCC_InitSysClock+0x60>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <MCAL_RCC_InitSysClock+0x60>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]

        /**< Wait until the High-Speed External clock is stable. */
        while(!GET_BIT(RCC_CR, RCC_CR_HSERDY));
 8001146:	bf00      	nop
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MCAL_RCC_InitSysClock+0x60>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <MCAL_RCC_InitSysClock+0x24>

        /**< Select High-Speed External clock as the system clock source. */
        RCC_CFGR = 0x00000001;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        Local_FunctionStatus = E_OK;
 800115a:	2301      	movs	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]

        RCC_CFGR |= (AHB_PRESCALE<<4);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= (APB2_PRESCALE<<11);
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= (APB1_PRESCALE<<8);
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <MCAL_RCC_InitSysClock+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6013      	str	r3, [r2, #0]
    #else
        #error "Wrong Choice !!"

    #endif /**< RCC_SYSCLK */

    return Local_FunctionStatus;
 8001176:	79fb      	ldrb	r3, [r7, #7]
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40021004 	.word	0x40021004

0800118c <MCAL_RCC_EnablePeripheral>:

Std_ReturnType MCAL_RCC_EnablePeripheral(u8 Copy_BusId, u8 Copy_PeripheralId)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

    switch(Copy_BusId)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d020      	beq.n	80011e8 <MCAL_RCC_EnablePeripheral+0x5c>
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	dc2b      	bgt.n	8001202 <MCAL_RCC_EnablePeripheral+0x76>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <MCAL_RCC_EnablePeripheral+0x28>
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d00d      	beq.n	80011ce <MCAL_RCC_EnablePeripheral+0x42>
 80011b2:	e026      	b.n	8001202 <MCAL_RCC_EnablePeripheral+0x76>
    {
        /**< Enable the peripheral on the AHB bus. */
        case RCC_AHB:
            SET_BIT(RCC_AHBENR, Copy_PeripheralId);
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MCAL_RCC_EnablePeripheral+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	4611      	mov	r1, r2
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <MCAL_RCC_EnablePeripheral+0x88>)
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
            break;
 80011cc:	e01c      	b.n	8001208 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB1 bus. */
        case RCC_APB1:
            SET_BIT(RCC_APB1ENR, Copy_PeripheralId);
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MCAL_RCC_EnablePeripheral+0x8c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	79ba      	ldrb	r2, [r7, #6]
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	4611      	mov	r1, r2
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <MCAL_RCC_EnablePeripheral+0x8c>)
 80011de:	430b      	orrs	r3, r1
 80011e0:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
            break;
 80011e6:	e00f      	b.n	8001208 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB2 bus. */
        case RCC_APB2:
            SET_BIT(RCC_APB2ENR, Copy_PeripheralId);
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MCAL_RCC_EnablePeripheral+0x90>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	79ba      	ldrb	r2, [r7, #6]
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	4611      	mov	r1, r2
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <MCAL_RCC_EnablePeripheral+0x90>)
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
            break;
 8001200:	e002      	b.n	8001208 <MCAL_RCC_EnablePeripheral+0x7c>

        default:
            Local_FunctionStatus = E_NOT_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
            break;
 8001206:	bf00      	nop
    }

    return Local_FunctionStatus;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40021014 	.word	0x40021014
 8001218:	4002101c 	.word	0x4002101c
 800121c:	40021018 	.word	0x40021018

08001220 <STK_Init>:

static void (*G_P_SYSfun)(void) = NULL;

/*****************************< Function Implementations *****************************/
void STK_Init(u32 Copy_Ticks)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    /**< Disable SysTick timer */
    STK->CTRL &= ~STK_CTRL_ENABLE_MASK;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <STK_Init+0x3c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <STK_Init+0x3c>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6013      	str	r3, [r2, #0]

    /**< Configure SysTick timer to use the processor clock */
    #if STK_CTRL_CLKSOURCE == STK_CTRL_CLKSOURCE_1
        STK -> CTRL |= STK_CTRL_CLKSOURCE_MASK;             /**< Set bit 2 to use the processor clock */
    #elif STK_CTRL_CLKSOURCE == STK_CTRL_CLKSOURCE_8
        STK->CTRL &= ~STK_CTRL_CLKSOURCE_MASK;              /**< Clear bit 2 to use the processor clock/8 */
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <STK_Init+0x3c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <STK_Init+0x3c>)
 800123a:	f023 0304 	bic.w	r3, r3, #4
 800123e:	6013      	str	r3, [r2, #0]
        #error "Invalid STK_CTRL_CLKSOURCE value. Please choose STK_CTRL_CLKSOURCE_1 or STK_CTRL_CLKSOURCE_8."
    #endif

    /**< Generate interrupt when it reaches zero */
    #if STK_CTRL_TICKINT == STK_CTRL_TICKINT_ENABLE
        STK->CTRL |= STK_CTRL_TICKINT_MASK;      /**< Set bit 1 to enable interrupt when the counter reaches zero */
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <STK_Init+0x3c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <STK_Init+0x3c>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	6013      	str	r3, [r2, #0]
    #else
        #error "Invalid STK_CTRL_TICKINT value. Please choose STK_CTRL_TICKINT_ENABLE or STK_CTRL_TICKINT_DISABLE."
    #endif

    /**< Load the initial value into the SysTick timer */
    STK->LOAD = Copy_Ticks;  
 800124c:	4a03      	ldr	r2, [pc, #12]	; (800125c <STK_Init+0x3c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6053      	str	r3, [r2, #4]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	e000e010 	.word	0xe000e010

08001260 <STK_Start>:

void STK_Start(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
    /**< Enable SysTick timer */
    STK->CTRL |= STK_CTRL_ENABLE_MASK;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <STK_Start+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <STK_Start+0x18>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	e000e010 	.word	0xe000e010

0800127c <STK_GetElapsedCounts>:
    /* Get the current value of the SysTick timer */
    return STK->VAL;
}

u32 STK_GetElapsedCounts(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
    static u32 Local_PreviousValue = 0;  /**< Store the previous SysTick timer value */ 
    u32 Local_CurrentValue = STK->VAL;   /**< Get the current SysTick timer value */ 
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <STK_GetElapsedCounts+0x44>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	603b      	str	r3, [r7, #0]
    u32 Local_ElapsedTicks;

    /**< Check if the timer has wrapped around (current value is less than the previous value) */ 
    if (Local_CurrentValue < Local_PreviousValue) 
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <STK_GetElapsedCounts+0x48>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d205      	bcs.n	800129e <STK_GetElapsedCounts+0x22>
    {
        /**< Calculate elapsed ticks considering timer overflow */ 
        Local_ElapsedTicks = Local_PreviousValue - Local_CurrentValue;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <STK_GetElapsedCounts+0x48>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e007      	b.n	80012ae <STK_GetElapsedCounts+0x32>
    } 
    else 
    {
        /**< Calculate elapsed ticks without timer overflow */ 
        Local_ElapsedTicks = STK->LOAD - (Local_CurrentValue - Local_PreviousValue);
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <STK_GetElapsedCounts+0x44>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <STK_GetElapsedCounts+0x48>)
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	1acb      	subs	r3, r1, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	607b      	str	r3, [r7, #4]
    }

    /**< Update the previous value for the next call */ 
    Local_PreviousValue = Local_CurrentValue;
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <STK_GetElapsedCounts+0x48>)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6013      	str	r3, [r2, #0]

    return Local_ElapsedTicks;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e010 	.word	0xe000e010
 80012c4:	20000064 	.word	0x20000064

080012c8 <STK_SetDelay_ms>:

    return Local_FunctionStatus;
}
  
Std_ReturnType STK_SetDelay_ms(f32 Copy_Milliseconds)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    /**< Calculate the number of ticks required to wait for the specified number of milliseconds */
    u32 Local_u32Ticks = (u32)((Copy_Milliseconds * STK_AHB_CLK) / 1000.0);
 80012d0:	491d      	ldr	r1, [pc, #116]	; (8001348 <STK_SetDelay_ms+0x80>)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7fe ff4c 	bl	8000170 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f960 	bl	80005a0 <__aeabi_f2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <STK_SetDelay_ms+0x84>)
 80012e6:	f7ff fadd 	bl	80008a4 <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fbbf 	bl	8000a74 <__aeabi_d2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60fb      	str	r3, [r7, #12]

    /**< Check if TicksRequired is within the valid range */
    if (Local_u32Ticks <= 0x00FFFFFF)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d21d      	bcs.n	800133e <STK_SetDelay_ms+0x76>
    {
    	/**< Clear the current value */
    	STK->VAL = 0;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <STK_SetDelay_ms+0x88>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
        /**< Configure SysTick timer with the calculated number of ticks */
        STK->LOAD = Local_u32Ticks;
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <STK_SetDelay_ms+0x88>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6053      	str	r3, [r2, #4]

        /**< Enable SysTick timer */
        STK->CTRL |= STK_CTRL_ENABLE_MASK;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <STK_SetDelay_ms+0x88>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <STK_SetDelay_ms+0x88>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6013      	str	r3, [r2, #0]

        /**< Wait until the SysTick timer reaches zero */
        while (!(STK->CTRL & STK_CTRL_COUNTFLAG_MASK));
 800131a:	bf00      	nop
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <STK_SetDelay_ms+0x88>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f9      	beq.n	800131c <STK_SetDelay_ms+0x54>

        /**< Disable SysTick timer */
        STK->CTRL &= ~STK_CTRL_ENABLE_MASK;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <STK_SetDelay_ms+0x88>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <STK_SetDelay_ms+0x88>)
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]

        /**< Reset the timer value */
        STK->VAL = 0;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <STK_SetDelay_ms+0x88>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]

        /**< Return success status */
        return E_OK;
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <STK_SetDelay_ms+0x78>
    }
    else
    { 
        /**< Return error status */
        return E_NOT_OK;
 800133e:	2300      	movs	r3, #0
    }
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	49742400 	.word	0x49742400
 800134c:	408f4000 	.word	0x408f4000
 8001350:	e000e010 	.word	0xe000e010

08001354 <SysTick_Handler>:


/*****************************< ISR function *****************************/

void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    if(G_P_SYSfun != NULL)
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Handler+0x18>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <SysTick_Handler+0x12>
    {
        G_P_SYSfun();
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <SysTick_Handler+0x18>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4798      	blx	r3
    }
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000060 	.word	0x20000060

08001370 <HAL_SEG_init>:
#include "GPIO.h"
#include "Seg-5161BS.h"


void HAL_SEG_init()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t cfg;
	cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001376:	2304      	movs	r3, #4
 8001378:	71bb      	strb	r3, [r7, #6]
	cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800137a:	2302      	movs	r3, #2
 800137c:	71fb      	strb	r3, [r7, #7]
	cfg.GPIO_PinNumber = SEG_A;
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <HAL_SEG_init+0x80>)
 800138a:	f7ff fd39 	bl	8000e00 <MCAL_GPIO_Init>
	cfg.GPIO_PinNumber = SEG_B;
 800138e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001392:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <HAL_SEG_init+0x80>)
 800139a:	f7ff fd31 	bl	8000e00 <MCAL_GPIO_Init>
	cfg.GPIO_PinNumber = SEG_C;
 800139e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <HAL_SEG_init+0x80>)
 80013aa:	f7ff fd29 	bl	8000e00 <MCAL_GPIO_Init>
	cfg.GPIO_PinNumber = SEG_D;
 80013ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <HAL_SEG_init+0x80>)
 80013ba:	f7ff fd21 	bl	8000e00 <MCAL_GPIO_Init>
	cfg.GPIO_PinNumber = SEG_E;
 80013be:	2320      	movs	r3, #32
 80013c0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <HAL_SEG_init+0x80>)
 80013c8:	f7ff fd1a 	bl	8000e00 <MCAL_GPIO_Init>
	cfg.GPIO_PinNumber = SEG_F;
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_SEG_init+0x80>)
 80013d6:	f7ff fd13 	bl	8000e00 <MCAL_GPIO_Init>
	cfg.GPIO_PinNumber = SEG_G;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEG_PORT, &cfg);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <HAL_SEG_init+0x80>)
 80013e4:	f7ff fd0c 	bl	8000e00 <MCAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <HAL_SEG_DisplayNumber>:

void HAL_SEG_DisplayNumber(u8 num)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	if (num > 9)
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b09      	cmp	r3, #9
 8001402:	f200 81ab 	bhi.w	800175c <HAL_SEG_DisplayNumber+0x368>
	{
		return;
	}
	else
	{
		switch(num)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b09      	cmp	r3, #9
 800140a:	f200 81a9 	bhi.w	8001760 <HAL_SEG_DisplayNumber+0x36c>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <HAL_SEG_DisplayNumber+0x20>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	0800143d 	.word	0x0800143d
 8001418:	0800148d 	.word	0x0800148d
 800141c:	080014dd 	.word	0x080014dd
 8001420:	0800152d 	.word	0x0800152d
 8001424:	0800157d 	.word	0x0800157d
 8001428:	080015cd 	.word	0x080015cd
 800142c:	0800161d 	.word	0x0800161d
 8001430:	0800166d 	.word	0x0800166d
 8001434:	080016bd 	.word	0x080016bd
 8001438:	0800170d 	.word	0x0800170d
		{
		case 0:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	48c9      	ldr	r0, [pc, #804]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001444:	f7ff fd74 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	48c6      	ldr	r0, [pc, #792]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001450:	f7ff fd6e 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	48c3      	ldr	r0, [pc, #780]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800145c:	f7ff fd68 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	48c0      	ldr	r0, [pc, #768]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001468:	f7ff fd62 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2120      	movs	r1, #32
 8001470:	48bd      	ldr	r0, [pc, #756]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001472:	f7ff fd5d 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	48bb      	ldr	r0, [pc, #748]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800147c:	f7ff fd58 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	48b8      	ldr	r0, [pc, #736]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001486:	f7ff fd53 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800148a:	e16a      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 1:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	48b5      	ldr	r0, [pc, #724]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001494:	f7ff fd4c 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	48b2      	ldr	r0, [pc, #712]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014a0:	f7ff fd46 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014aa:	48af      	ldr	r0, [pc, #700]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014ac:	f7ff fd40 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b6:	48ac      	ldr	r0, [pc, #688]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014b8:	f7ff fd3a 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2120      	movs	r1, #32
 80014c0:	48a9      	ldr	r0, [pc, #676]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014c2:	f7ff fd35 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	48a7      	ldr	r0, [pc, #668]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014cc:	f7ff fd30 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2140      	movs	r1, #64	; 0x40
 80014d4:	48a4      	ldr	r0, [pc, #656]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014d6:	f7ff fd2b 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 80014da:	e142      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 2:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e2:	48a1      	ldr	r0, [pc, #644]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014e4:	f7ff fd24 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ee:	489e      	ldr	r0, [pc, #632]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014f0:	f7ff fd1e 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fa:	489b      	ldr	r0, [pc, #620]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80014fc:	f7ff fd18 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001506:	4898      	ldr	r0, [pc, #608]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001508:	f7ff fd12 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2120      	movs	r1, #32
 8001510:	4895      	ldr	r0, [pc, #596]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001512:	f7ff fd0d 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	4893      	ldr	r0, [pc, #588]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800151c:	f7ff fd08 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4890      	ldr	r0, [pc, #576]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001526:	f7ff fd03 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800152a:	e11a      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>

		case 3:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001532:	488d      	ldr	r0, [pc, #564]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001534:	f7ff fcfc 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153e:	488a      	ldr	r0, [pc, #552]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001540:	f7ff fcf6 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4887      	ldr	r0, [pc, #540]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800154c:	f7ff fcf0 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001556:	4884      	ldr	r0, [pc, #528]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001558:	f7ff fcea 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2120      	movs	r1, #32
 8001560:	4881      	ldr	r0, [pc, #516]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001562:	f7ff fce5 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	487f      	ldr	r0, [pc, #508]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800156c:	f7ff fce0 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	487c      	ldr	r0, [pc, #496]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001576:	f7ff fcdb 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800157a:	e0f2      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 4:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001582:	4879      	ldr	r0, [pc, #484]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001584:	f7ff fcd4 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158e:	4876      	ldr	r0, [pc, #472]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001590:	f7ff fcce 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159a:	4873      	ldr	r0, [pc, #460]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800159c:	f7ff fcc8 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a6:	4870      	ldr	r0, [pc, #448]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015a8:	f7ff fcc2 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2120      	movs	r1, #32
 80015b0:	486d      	ldr	r0, [pc, #436]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015b2:	f7ff fcbd 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	486b      	ldr	r0, [pc, #428]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015bc:	f7ff fcb8 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	4868      	ldr	r0, [pc, #416]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015c6:	f7ff fcb3 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 80015ca:	e0ca      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 5:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d2:	4865      	ldr	r0, [pc, #404]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015d4:	f7ff fcac 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4862      	ldr	r0, [pc, #392]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015e0:	f7ff fca6 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ea:	485f      	ldr	r0, [pc, #380]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015ec:	f7ff fca0 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f6:	485c      	ldr	r0, [pc, #368]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80015f8:	f7ff fc9a 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2120      	movs	r1, #32
 8001600:	4859      	ldr	r0, [pc, #356]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001602:	f7ff fc95 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	4857      	ldr	r0, [pc, #348]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800160c:	f7ff fc90 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	4854      	ldr	r0, [pc, #336]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001616:	f7ff fc8b 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800161a:	e0a2      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 6:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	4851      	ldr	r0, [pc, #324]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001624:	f7ff fc84 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162e:	484e      	ldr	r0, [pc, #312]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001630:	f7ff fc7e 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163a:	484b      	ldr	r0, [pc, #300]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800163c:	f7ff fc78 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001646:	4848      	ldr	r0, [pc, #288]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001648:	f7ff fc72 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	4845      	ldr	r0, [pc, #276]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001652:	f7ff fc6d 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	4843      	ldr	r0, [pc, #268]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800165c:	f7ff fc68 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	4840      	ldr	r0, [pc, #256]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001666:	f7ff fc63 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800166a:	e07a      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 7:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	483d      	ldr	r0, [pc, #244]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001674:	f7ff fc5c 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001680:	f7ff fc56 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168a:	4837      	ldr	r0, [pc, #220]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800168c:	f7ff fc50 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001696:	4834      	ldr	r0, [pc, #208]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001698:	f7ff fc4a 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2120      	movs	r1, #32
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016a2:	f7ff fc45 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	482f      	ldr	r0, [pc, #188]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016ac:	f7ff fc40 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	482c      	ldr	r0, [pc, #176]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016b6:	f7ff fc3b 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 80016ba:	e052      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 8:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c2:	4829      	ldr	r0, [pc, #164]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016c4:	f7ff fc34 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ce:	4826      	ldr	r0, [pc, #152]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016d0:	f7ff fc2e 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016dc:	f7ff fc28 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	4820      	ldr	r0, [pc, #128]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016e8:	f7ff fc22 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2120      	movs	r1, #32
 80016f0:	481d      	ldr	r0, [pc, #116]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016f2:	f7ff fc1d 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 80016fc:	f7ff fc18 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	4818      	ldr	r0, [pc, #96]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001706:	f7ff fc13 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800170a:	e02a      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		case 9:
			MCAL_GPIO_WritePin(SEG_PORT, SEG_A, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001714:	f7ff fc0c 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_B, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001720:	f7ff fc06 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_C, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800172c:	f7ff fc00 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_D, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001738:	f7ff fbfa 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_E, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2120      	movs	r1, #32
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001742:	f7ff fbf5 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_F, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 800174c:	f7ff fbf0 	bl	8000f30 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(SEG_PORT, SEG_G, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <HAL_SEG_DisplayNumber+0x374>)
 8001756:	f7ff fbeb 	bl	8000f30 <MCAL_GPIO_WritePin>
			break;
 800175a:	e002      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		return;
 800175c:	bf00      	nop
 800175e:	e000      	b.n	8001762 <HAL_SEG_DisplayNumber+0x36e>
		default:
			break;
 8001760:	bf00      	nop
		}
	}
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40010c00 	.word	0x40010c00

0800176c <main>:
void Ready();

/*****************************< Main  *********************************/

int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    /********< Initialize Peripherals and Clock *************************/
	STK_Init(1000);
 8001770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001774:	f7ff fd54 	bl	8001220 <STK_Init>

	MCAL_RCC_InitSysClock();
 8001778:	f7ff fcd4 	bl	8001124 <MCAL_RCC_InitSysClock>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPAEN);
 800177c:	2102      	movs	r1, #2
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff fd04 	bl	800118c <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPBEN);
 8001784:	2103      	movs	r1, #3
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff fd00 	bl	800118c <MCAL_RCC_EnablePeripheral>

	LEDS_init();
 800178c:	f000 f81a 	bl	80017c4 <LEDS_init>
	BUTTONS_init();
 8001790:	f000 f836 	bl	8001800 <BUTTONS_init>
	HAL_SEG_init();
 8001794:	f7ff fdec 	bl	8001370 <HAL_SEG_init>

	Stop();
 8001798:	f000 f87c 	bl	8001894 <Stop>
	while(1)
	{
		if(Next_State == RedToGreen)
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <main+0x54>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <main+0x40>
		{
			Ready();
 80017a4:	f000 f8ea 	bl	800197c <Ready>
			Stop();
 80017a8:	f000 f874 	bl	8001894 <Stop>
		}
		if(Next_State == GreenToRed)
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <main+0x54>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d1f3      	bne.n	800179c <main+0x30>
		{
			Ready();
 80017b4:	f000 f8e2 	bl	800197c <Ready>
			Clear();
 80017b8:	f000 f82e 	bl	8001818 <Clear>
		if(Next_State == RedToGreen)
 80017bc:	e7ee      	b.n	800179c <main+0x30>
 80017be:	bf00      	nop
 80017c0:	20000000 	.word	0x20000000

080017c4 <LEDS_init>:

/*****************************< End of Main  *********************************/


void LEDS_init()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	/************< Car Traffic Lights***********/
	HAL_LED_Init(LED_PORTA, LED_PIN_0);
 80017c8:	2101      	movs	r1, #1
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <LEDS_init+0x38>)
 80017cc:	f7ff fbd8 	bl	8000f80 <HAL_LED_Init>
	//yellow
	HAL_LED_Init(LED_PORTA, LED_PIN_1);
 80017d0:	2102      	movs	r1, #2
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <LEDS_init+0x38>)
 80017d4:	f7ff fbd4 	bl	8000f80 <HAL_LED_Init>
	//green
	HAL_LED_Init(LED_PORTA, LED_PIN_2);
 80017d8:	2104      	movs	r1, #4
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <LEDS_init+0x38>)
 80017dc:	f7ff fbd0 	bl	8000f80 <HAL_LED_Init>
	/********< Pedestrian Traffic Lights********/
	//red
	HAL_LED_Init(LED_PORTA, LED_PIN_5);
 80017e0:	2120      	movs	r1, #32
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <LEDS_init+0x38>)
 80017e4:	f7ff fbcc 	bl	8000f80 <HAL_LED_Init>
	//yellow
	HAL_LED_Init(LED_PORTA, LED_PIN_6);
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <LEDS_init+0x38>)
 80017ec:	f7ff fbc8 	bl	8000f80 <HAL_LED_Init>
	//green
	HAL_LED_Init(LED_PORTA, LED_PIN_7);
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	4802      	ldr	r0, [pc, #8]	; (80017fc <LEDS_init+0x38>)
 80017f4:	f7ff fbc4 	bl	8000f80 <HAL_LED_Init>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40010800 	.word	0x40010800

08001800 <BUTTONS_init>:

void BUTTONS_init()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_PushButton_Init(PB_PORTB, PB_PIN0, FLOATING);
 8001804:	2202      	movs	r2, #2
 8001806:	2101      	movs	r1, #1
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <BUTTONS_init+0x14>)
 800180a:	f7ff fbfe 	bl	800100a <HAL_PushButton_Init>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010c00 	.word	0x40010c00

08001818 <Clear>:


void Clear()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	Current_State = ClearState;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <Clear+0x6c>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
	u8 i;
	for(i = 5; i>=1; i--)
 8001824:	2305      	movs	r3, #5
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	e021      	b.n	800186e <Clear+0x56>
	{
		HAL_SEG_DisplayNumber(i);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fde1 	bl	80013f4 <HAL_SEG_DisplayNumber>
		HAL_LED_On(LED_PORTA, Car_Red);
 8001832:	2101      	movs	r1, #1
 8001834:	4814      	ldr	r0, [pc, #80]	; (8001888 <Clear+0x70>)
 8001836:	f7ff fbb9 	bl	8000fac <HAL_LED_On>
		HAL_LED_Off(LED_PORTA, Car_Green);
 800183a:	2104      	movs	r1, #4
 800183c:	4812      	ldr	r0, [pc, #72]	; (8001888 <Clear+0x70>)
 800183e:	f7ff fbc5 	bl	8000fcc <HAL_LED_Off>
		HAL_LED_Off(LED_PORTA, Car_Yellow);
 8001842:	2102      	movs	r1, #2
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <Clear+0x70>)
 8001846:	f7ff fbc1 	bl	8000fcc <HAL_LED_Off>

		HAL_LED_Off(LED_PORTA, Ped_Red);
 800184a:	2120      	movs	r1, #32
 800184c:	480e      	ldr	r0, [pc, #56]	; (8001888 <Clear+0x70>)
 800184e:	f7ff fbbd 	bl	8000fcc <HAL_LED_Off>
		HAL_LED_Off(LED_PORTA, Ped_Yellow);
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <Clear+0x70>)
 8001856:	f7ff fbb9 	bl	8000fcc <HAL_LED_Off>
		HAL_LED_On(LED_PORTA, Ped_Green);
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <Clear+0x70>)
 800185e:	f7ff fba5 	bl	8000fac <HAL_LED_On>

		STK_SetDelay_ms(1000);
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <Clear+0x74>)
 8001864:	f7ff fd30 	bl	80012c8 <STK_SetDelay_ms>
	for(i = 5; i>=1; i--)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	3b01      	subs	r3, #1
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1da      	bne.n	800182a <Clear+0x12>
	}

	Next_State = RedToGreen;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <Clear+0x78>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000068 	.word	0x20000068
 8001888:	40010800 	.word	0x40010800
 800188c:	447a0000 	.word	0x447a0000
 8001890:	20000000 	.word	0x20000000

08001894 <Stop>:


void Stop()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	SinglePressFlag = 1;
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <Stop+0xd0>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
	Current_State = StopState;
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <Stop+0xd4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	if(Next_State == GreenToRed)
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <Stop+0xd8>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d056      	beq.n	800195c <Stop+0xc8>
	{
		return;
	}
	u8 i;
	u16 j;
	for (i = 5; i>=1; i--)
 80018ae:	2305      	movs	r3, #5
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e049      	b.n	8001948 <Stop+0xb4>
	{
		HAL_SEG_DisplayNumber(i);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fd9c 	bl	80013f4 <HAL_SEG_DisplayNumber>
		for(j = 1; j<= 1000; j++)
 80018bc:	2301      	movs	r3, #1
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	e03b      	b.n	800193a <Stop+0xa6>
		{
			if((HAL_PushButton_Read(PB_PORTB, PB_PIN0, 10) == GPIO_PIN_SET) && SinglePressFlag)
 80018c2:	220a      	movs	r2, #10
 80018c4:	2101      	movs	r1, #1
 80018c6:	482a      	ldr	r0, [pc, #168]	; (8001970 <Stop+0xdc>)
 80018c8:	f7ff fbe2 	bl	8001090 <HAL_PushButton_Read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d114      	bne.n	80018fc <Stop+0x68>
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <Stop+0xd0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d010      	beq.n	80018fc <Stop+0x68>
			{
				SinglePressFlag = 0;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <Stop+0xd0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
				STK_SetDelay_ms(200);
 80018e0:	4824      	ldr	r0, [pc, #144]	; (8001974 <Stop+0xe0>)
 80018e2:	f7ff fcf1 	bl	80012c8 <STK_SetDelay_ms>
				if(MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 80018e6:	2101      	movs	r1, #1
 80018e8:	4821      	ldr	r0, [pc, #132]	; (8001970 <Stop+0xdc>)
 80018ea:	f7ff fb0a 	bl	8000f02 <MCAL_GPIO_ReadPin>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <Stop+0x68>
				{
					Next_State = GreenToRed;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <Stop+0xd8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
					return;
 80018fa:	e030      	b.n	800195e <Stop+0xca>
				}
			}
			HAL_LED_Off(LED_PORTA, Car_Red);
 80018fc:	2101      	movs	r1, #1
 80018fe:	481e      	ldr	r0, [pc, #120]	; (8001978 <Stop+0xe4>)
 8001900:	f7ff fb64 	bl	8000fcc <HAL_LED_Off>
			HAL_LED_On(LED_PORTA, Car_Green);
 8001904:	2104      	movs	r1, #4
 8001906:	481c      	ldr	r0, [pc, #112]	; (8001978 <Stop+0xe4>)
 8001908:	f7ff fb50 	bl	8000fac <HAL_LED_On>
			HAL_LED_Off(LED_PORTA, Car_Yellow);
 800190c:	2102      	movs	r1, #2
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <Stop+0xe4>)
 8001910:	f7ff fb5c 	bl	8000fcc <HAL_LED_Off>

			HAL_LED_On(LED_PORTA, Ped_Red);
 8001914:	2120      	movs	r1, #32
 8001916:	4818      	ldr	r0, [pc, #96]	; (8001978 <Stop+0xe4>)
 8001918:	f7ff fb48 	bl	8000fac <HAL_LED_On>
			HAL_LED_Off(LED_PORTA, Ped_Yellow);
 800191c:	2140      	movs	r1, #64	; 0x40
 800191e:	4816      	ldr	r0, [pc, #88]	; (8001978 <Stop+0xe4>)
 8001920:	f7ff fb54 	bl	8000fcc <HAL_LED_Off>
			HAL_LED_Off(LED_PORTA, Ped_Green);
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <Stop+0xe4>)
 8001928:	f7ff fb50 	bl	8000fcc <HAL_LED_Off>
			STK_SetDelay_ms(1);
 800192c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001930:	f7ff fcca 	bl	80012c8 <STK_SetDelay_ms>
		for(j = 1; j<= 1000; j++)
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	3301      	adds	r3, #1
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001940:	d9bf      	bls.n	80018c2 <Stop+0x2e>
	for (i = 5; i>=1; i--)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	3b01      	subs	r3, #1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1b2      	bne.n	80018b4 <Stop+0x20>
		}

	}
	SinglePressFlag = 1;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <Stop+0xd0>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
	Next_State = GreenToRed;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <Stop+0xd8>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e000      	b.n	800195e <Stop+0xca>
		return;
 800195c:	bf00      	nop
}
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000001 	.word	0x20000001
 8001968:	20000068 	.word	0x20000068
 800196c:	20000000 	.word	0x20000000
 8001970:	40010c00 	.word	0x40010c00
 8001974:	43480000 	.word	0x43480000
 8001978:	40010800 	.word	0x40010800

0800197c <Ready>:

void Ready()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	HAL_LED_Off(LED_PORTA, Car_Red);
 8001982:	2101      	movs	r1, #1
 8001984:	4819      	ldr	r0, [pc, #100]	; (80019ec <Ready+0x70>)
 8001986:	f7ff fb21 	bl	8000fcc <HAL_LED_Off>
	HAL_LED_Off(LED_PORTA, Car_Green);
 800198a:	2104      	movs	r1, #4
 800198c:	4817      	ldr	r0, [pc, #92]	; (80019ec <Ready+0x70>)
 800198e:	f7ff fb1d 	bl	8000fcc <HAL_LED_Off>
	HAL_LED_Off(LED_PORTA, Car_Yellow);
 8001992:	2102      	movs	r1, #2
 8001994:	4815      	ldr	r0, [pc, #84]	; (80019ec <Ready+0x70>)
 8001996:	f7ff fb19 	bl	8000fcc <HAL_LED_Off>

	HAL_LED_Off(LED_PORTA, Ped_Red);
 800199a:	2120      	movs	r1, #32
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <Ready+0x70>)
 800199e:	f7ff fb15 	bl	8000fcc <HAL_LED_Off>
	HAL_LED_Off(LED_PORTA, Ped_Yellow);
 80019a2:	2140      	movs	r1, #64	; 0x40
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <Ready+0x70>)
 80019a6:	f7ff fb11 	bl	8000fcc <HAL_LED_Off>
	HAL_LED_Off(LED_PORTA, Ped_Green);
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	480f      	ldr	r0, [pc, #60]	; (80019ec <Ready+0x70>)
 80019ae:	f7ff fb0d 	bl	8000fcc <HAL_LED_Off>

	u8 i;
	for (i = 5; i>=1; i--)
 80019b2:	2305      	movs	r3, #5
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	e011      	b.n	80019dc <Ready+0x60>
	{
		HAL_SEG_DisplayNumber(i);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fd1a 	bl	80013f4 <HAL_SEG_DisplayNumber>
		HAL_LED_Toggle(LED_PORTA, Car_Yellow);
 80019c0:	2102      	movs	r1, #2
 80019c2:	480a      	ldr	r0, [pc, #40]	; (80019ec <Ready+0x70>)
 80019c4:	f7ff fb12 	bl	8000fec <HAL_LED_Toggle>
		HAL_LED_Toggle(LED_PORTA, Ped_Yellow);
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <Ready+0x70>)
 80019cc:	f7ff fb0e 	bl	8000fec <HAL_LED_Toggle>
		STK_SetDelay_ms(1000);
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <Ready+0x74>)
 80019d2:	f7ff fc79 	bl	80012c8 <STK_SetDelay_ms>
	for (i = 5; i>=1; i--)
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	3b01      	subs	r3, #1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ea      	bne.n	80019b8 <Ready+0x3c>
	}

}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010800 	.word	0x40010800
 80019f0:	447a0000 	.word	0x447a0000

080019f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a22:	f000 f811 	bl	8001a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a26:	f7ff fea1 	bl	800176c <main>

08001a2a <LoopForever>:

LoopForever:
  b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001a38:	08001ab0 	.word	0x08001ab0
  ldr r2, =_sbss
 8001a3c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001a40:	2000006c 	.word	0x2000006c

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>
	...

08001a48 <__libc_init_array>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	4d0c      	ldr	r5, [pc, #48]	; (8001a80 <__libc_init_array+0x38>)
 8001a4e:	4c0d      	ldr	r4, [pc, #52]	; (8001a84 <__libc_init_array+0x3c>)
 8001a50:	1b64      	subs	r4, r4, r5
 8001a52:	10a4      	asrs	r4, r4, #2
 8001a54:	42a6      	cmp	r6, r4
 8001a56:	d109      	bne.n	8001a6c <__libc_init_array+0x24>
 8001a58:	f000 f81a 	bl	8001a90 <_init>
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	4d0a      	ldr	r5, [pc, #40]	; (8001a88 <__libc_init_array+0x40>)
 8001a60:	4c0a      	ldr	r4, [pc, #40]	; (8001a8c <__libc_init_array+0x44>)
 8001a62:	1b64      	subs	r4, r4, r5
 8001a64:	10a4      	asrs	r4, r4, #2
 8001a66:	42a6      	cmp	r6, r4
 8001a68:	d105      	bne.n	8001a76 <__libc_init_array+0x2e>
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a70:	4798      	blx	r3
 8001a72:	3601      	adds	r6, #1
 8001a74:	e7ee      	b.n	8001a54 <__libc_init_array+0xc>
 8001a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7a:	4798      	blx	r3
 8001a7c:	3601      	adds	r6, #1
 8001a7e:	e7f2      	b.n	8001a66 <__libc_init_array+0x1e>
 8001a80:	08001aa8 	.word	0x08001aa8
 8001a84:	08001aa8 	.word	0x08001aa8
 8001a88:	08001aa8 	.word	0x08001aa8
 8001a8c:	08001aac 	.word	0x08001aac

08001a90 <_init>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr

08001a9c <_fini>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr
